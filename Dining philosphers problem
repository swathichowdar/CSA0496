#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5
sem_t chopstick[N];

void *philosopher(void *num) {
int phil = *(int *)num;
printf("Philosopher %d is thinking\n", phil);
sem_wait(&chopstick[phil]);
sem_wait(&chopstick[(phil + 1) % N]);
printf("Philosopher %d is eating\n", phil);
sleep(2);
printf("Philosopher %d has finished eating\n", phil);
sem_post(&chopstick[phil]);
sem_post(&chopstick[(phil + 1) % N]);
return NULL;
}

int main() {
pthread_t thread[N];
int i, phil[N];
for (i = 0; i < N; i++) {
sem_init(&chopstick[i], 0, 1);
phil[i] = i;
}
for (i = 0; i < N; i++) pthread_create(&thread[i], NULL, philosopher, &phil[i]);
for (i = 0; i < N; i++) pthread_join(thread[i], NULL);
for (i = 0; i < N; i++) sem_destroy(&chopstick[i]);
return 0;
